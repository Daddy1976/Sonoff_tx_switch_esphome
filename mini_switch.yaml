#
#   Sonoff-TX-switch.yaml only one Relay
#
#
#   Created by Marek Halma on 12/08/2023.
#
#   Add new file .yaml and copy this stricture

#   substitutions:
#
#       device_name: "test"
#       wifi_ssid: !secret wifi_ssid
#       wifi_pass: !secret wifi_password
#       broker_ip: "192.168.2.130"
#       broker_user: !secret user
#       broker_password: !secret password
#
#   packages:
#       remote_package:
#           url: https://github.com/Daddy1976/Sonoff_tx_switch_esphome
#           ref: main
#           files: [tx_switch.yaml]
#           refresh: 300s
        

esphome:
  name: ${device_name}
  platform: ESP8266
  board: esp01_1m
  project:
    name: "Mark.Sonoff MINIR2 Wi-Fi DIY Smart Switch"
    version: "0.4"

  on_boot:
    priority: -10
    then:
      - light.turn_on: blue_led_light

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_pass}
  fast_connect: True

logger:
  level: info
  
api:
  reboot_timeout: 15min

ota:
  password: !secret ota_password

# the web_server & sensor components can be removed without affecting core functionaility.

web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password

#mqtt:
#  topic_prefix: /kurenie/mini
#  discovery: false
#  broker: ${broker_ip}
#  port: 1883
#  username: ${broker_user}
#  password: ${broker_password}
#  discovery_prefix: homeassistant
#  on_message:
#    - topic: /kurenie/mini/switch/relay/state
#      payload: 'ON'
#      then:
#        - switch.turn_on:
#            id: relay
#    - topic: /kurenie/mini/switch/relay/state
#      payload: 'OFF'
#      then:
#        - switch.turn_off:
#            id: relay

sensor:
  # Uptime sensor
  - platform: uptime
    name: $device_name uptime
    internal: True
    
  - platform: template
    name: "ESP Free Heap"
    lambda: |-
      int value = ESP.getFreeHeap();
      return value / 1024.0;
    unit_of_measurement: "kB"
    icon: mdi:chip
    state_class: measurement
    entity_category: "diagnostic"
  - platform: template
    name: "ESP Sketch Size"
    lambda: |-
      int value = ESP.getSketchSize();
      return value / 1024.0;
    unit_of_measurement: "kB"
    icon: mdi:chip
    state_class: measurement
    entity_category: "diagnostic"
  - platform: template
    name: "ESP Fragmentation"
    lambda: |-
      int value = ESP.getHeapFragmentation();
      return value;
    unit_of_measurement: "%"
    icon: mdi:chip
    state_class: measurement
    entity_category: "diagnostic"
  - platform: template
    name: "ESP Last Reset"
    lambda: |-
      int value = ESP.getResetReason();
      return value;
    icon: mdi:chip
    state_class: measurement
    entity_category: "diagnostic"
    
  # WiFi Signal sensor
  - platform: wifi_signal
    id: wifi_signal_db
    name: RSSI
    entity_category: "diagnostic"
    update_interval: 30s
    filters:
      - lambda: >
          if (x > -60) id(wifi_signal_db).set_icon("mdi:wifi-strength-4");
            else if (x > -70) id(wifi_signal_db).set_icon("mdi:wifi-strength-3");
            else if (x > -80) id(wifi_signal_db).set_icon("mdi:wifi-strength-2");
            else if (x > -90) id(wifi_signal_db).set_icon("mdi:wifi-strength-1");
            else if (x > -99) id(wifi_signal_db).set_icon("mdi:wifi-strength-outline");
            else id(wifi_signal_db).set_icon("mdi:wifi-strength-alert-outline");
          return x;
  # Reports the WiFi signal strength in %
  - platform: copy
    source_id: wifi_signal_db
    name: $device_name WiFi Signal
    filters:
      - lambda: >
          int s = min(max(2 * (x + 100.0), 0.0), 100.0);
          return s;
    unit_of_measurement: "%"
    entity_category: "diagnostic"
#######################################
# Device specific Config Begins Below #
#######################################

text_sensor:
  - platform: version
    name: Date
  - platform: wifi_info
    ip_address:
      name: $device_name ip
    ssid:
      name: $device_name ssid
#    bssid:
#      name: $device_name bssid

binary_sensor:
  # the 7 lines below define the reset button
  - platform: gpio
    pin:
      number: GPIO0
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Smart button"
    on_press:
      - switch.toggle: relay
#      - mqtt.publish_json:
#          topic: button
#          payload: |-
#              root["key"] = id(relay).state;
  - platform: status
    name: ${device_name} Status

  # the 13 lines below toggle the main relay on command
switch:
  - platform: gpio
    name: Relay
    pin: GPIO012
    id: relay
    internal: True

output:
  # the 3 lines below control the Blue LED
  - platform: esp8266_pwm
    id: blue_led
    pin: GPIO13
    inverted: True

light:
  # the 4 lines below define the Blue LED light on Sonoff Mini, to expose in HomeAssistant remove line "internal: true"
  - platform: monochromatic
    name: ${device_name}_blueled
    output: blue_led
    id: blue_led_light
    internal: True
    

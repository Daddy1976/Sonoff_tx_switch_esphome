#
#   Sonoff-TX-switch.yaml 3 Relay support
#
#
#   Created by Marek Halma on 12/08/2023.
#
#   Add new file .yaml and copy this stricture

#   substitutions:
#
#       device_name: "test"
#       wifi_ssid: !secret wifi_ssid
#       wifi_pass: !secret wifi_password
#       broker_ip: "#BROKER_IP#" my broker is CERBO GX Victron or Homeassistant with Mosquitto
#       broker_user: !secret user
#       broker_password: !secret password
#
#   packages:
#       remote_package:
#           url: https://github.com/Daddy1976/Sonoff_tx_switch_esphome
#           ref: main
#           files: [tx_switch.yaml]
#           refresh: 300s
        

esphome:
  name: ${device_name}
  platform: ESP8266
  board: esp01_1m

#  on_boot:
#    priority: -10
#    then:
#      - light.turn_on: blue_led_light
  project:
    name: "Mark.Sonoff T1EU1C-TX Series"
    version: "0.3"

wifi:
  networks:
    - ssid: ${wifi_ssid}
      password: ${wifi_pass}
#    - ssid: ${wifi_ssid2}
#      password: ${wifi_pass}
#  passive_scan: True
  fast_connect: True
  on_connect:
    then:
      - light.turn_on: blue_led_light

logger:
  level: info
  
api:
  reboot_timeout: 15min
  on_client_disconnected:
    - logger.log:
        format: "API client disconnected!"
        level: warn
    - script.execute: light_on_connect
  on_client_connected:
    - logger.log:
        format: "API client connected!"
        level: info

ota:
  password: !secret ota_password

# the web_server & sensor components can be removed without affecting core functionaility.

web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password

#mqtt:
#  topic_prefix: /homeassistant/tx/$device_name
#  discovery: false
#  broker: ${broker_ip}
#  port: 1883
#  username: ${broker_user}
#  password: ${broker_password}
#  discovery_prefix: homeassistant

sensor:
  # Uptime sensor
  - platform: uptime
    name: $device_name uptime
  # WiFi Signal sensor
  - platform: wifi_signal
    id: wifi_signal_db
    name: RSSI
    entity_category: "diagnostic"
    update_interval: 30s
    filters:
      - lambda: >
          ESP_LOGI("main", "Value of my sensor: %s", x);
          ESP_LOGI("main", "State: %s", id(wifi_signal_db).state);
          if (x > -60) id(wifi_signal_db).set_icon("mdi:wifi-strength-4");
            else if (x > -70) id(wifi_signal_db).set_icon("mdi:wifi-strength-3");
            else if (x > -80) id(wifi_signal_db).set_icon("mdi:wifi-strength-2");
            else if (x > -90) id(wifi_signal_db).set_icon("mdi:wifi-strength-1");
            else if (x > -99) id(wifi_signal_db).set_icon("mdi:wifi-strength-outline");
            else id(wifi_signal_db).set_icon("mdi:wifi-strength-alert-outline");
          return x;
  # Reports the WiFi signal strength in %
  - platform: copy
    source_id: wifi_signal_db
    name: $device_name WiFi Signal
    filters:
      - lambda: >
          int s = min(max(2 * (x + 100.0), 0.0), 100.0);
          return s;
    unit_of_measurement: "%"
    entity_category: "diagnostic"
#######################################
# Device specific Config Begins Below #
#######################################

text_sensor:
  - platform: version
    name: Date
    entity_category: "diagnostic"
  - platform: wifi_info
    ip_address:
      name: $device_name ip
      entity_category: "diagnostic"
    ssid:
      name: $device_name ssid
      entity_category: "diagnostic"
#    bssid:
#      name: $device_name bssid
#      entity_category: "diagnostic"
#    scan_results:
#      name: $device_name Scan
#      entity_category: "diagnostic"

binary_sensor:
  - name: ${device_name} Status
    platform: status
    id: api_status
    on_state:
      then:
        - script.execute:
            id: light_on_connect
  # the 7 lines below define the reset button
  - platform: gpio
    pin:
      number: GPIO0
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Sonoff TX Touchpad 1"
    on_press:
      - switch.toggle: relay_1
#      - mqtt.publish_json:
#          topic: touchpad1
#          payload: |-
#              root["key"] = id(relay_1).state;
#  - platform: gpio
#    pin:
#      number: GPIO9
#      mode:
#        input: true
#        pullup: true
#      inverted: true
#    name: "Sonoff TX Touchpad 2"
#    on_press:
#      - switch.toggle: relay_2
#      - mqtt.publish_json:
#          topic: touchpad2
#          payload: |-
#              root["key"] = id(relay_2).state;
#  - platform: gpio
#    pin:
#      number: GPIO10
#      mode:
#        input: true
#        pullup: true
#      inverted: true
#    name: "Sonoff TX Touchpad 3"
#    on_press:
#      - switch.toggle: relay_3
#      - mqtt.publish_json:
#          topic: touchpad3
#          payload: |-
#              root["key"] = id(relay_3).state;
  - platform: status
    name: ${device_name} Status

  # the 13 lines below toggle the main relay on command
switch:
  - platform: gpio
    name: ${device_name} switch 1
    pin: GPIO012
    id: relay_1
#  - platform: gpio
#    name: ${device_name} switch 2
#    pin: GPIO5
#    id: relay_2
#  - platform: gpio
#    name: ${device_name} switch 3
#    pin: GPIO4
#    id: relay_3

output:
  # the 3 lines below control the Blue LED
  - platform: esp8266_pwm
    id: blue_led
    pin: GPIO13
    inverted: True

light:
  # the 4 lines below define the Blue LED light on Sonoff Mini, to expose in HomeAssistant remove line "internal: true"
  - platform: monochromatic
    name: ${device_name}_blueled
    output: blue_led
    id: blue_led_light
    internal: True
    
script:
  - id: light_on_connect
    mode: restart
    then:
      - if:
          condition:
            api.connected:
          then:
            - output.esp8266_pwm.set_frequency:
                id: blue_led
                frequency: 1000Hz
            - output.set_level:
                id: blue_led
                level: 25%
#          else:
#            - output.esp8266_pwm.set_frequency:
#                id: blue_led
#                frequency: 1Hz
#            - output.set_level:
#                id: blue_led
#                level: 100%
  - id: api_disonneted
    then:
      - output.esp8266_pwm.set_frequency:
          id: blue_led
          frequency: 8Hz
      - output.set_level:
          id: blue_led
          level: 80%
    
